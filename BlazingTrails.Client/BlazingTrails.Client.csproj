<Project Sdk="Microsoft.NET.Sdk.BlazorWebAssembly">

	<PropertyGroup>
		<TargetFramework>net8.0</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<NpmLastInstall>node_modules/.last-install</NpmLastInstall>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly" Version="8.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.Components.WebAssembly.DevServer" Version="8.0.0" PrivateAssets="all" />
	</ItemGroup>

	<!-- When using dotnet watch only watch for changes in scss files and not css files
	without this we would end up in an infinite loop
	TODO research why the infinite loop happens -->
	<ItemGroup>
		<Watch Include="**/*.scss" />
		<None Update="**/*.css" Watch="false" />
	</ItemGroup>

	<!-- Runs the command npm dash dash version to check 
		 if NPM is installed. If a 
		 nonzero error code is 
		 returned, then NPM is 
		 not installed and an 
		 error is shown on the 
		 build.-->
	<Target Name="CheckForNpm" BeforeTargets="RunNpmInstall">
		<Exec Command="npm --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="NPM is required to build this project." />
	</Target>

	<!--
	 Run npm install but only when package.json 
	 is newer than NpmLastInstall specified in the 
	 PropertyGroup. This means npm install will 
	 only be run when something has changed 
	 and not on every build.
	-->
	<Target Name="RunNpmInstall" BeforeTargets="CompileScopedScss" Inputs="package.json" Outputs="$(NpmLastInstall)">
		<Exec Command="npm install" />
		<Touch Files="$(NpmLastInstall)" AlwaysCreate="true" />
	</Target>

	<Target Name="CompileScopedScss" BeforeTargets="Compile">
		<!--  The ItemGroup searches for 
			  all scoped SCSS files inside 
			  the Features folder. -->
		<ItemGroup>
			<ScopedScssFiles Include="Features/**/*.razor.scss" />
		</ItemGroup>

		<!--   This runs the sass npm package to 
			   compile any SCSS files to CSS via the 
			   script defined in the package.json file. -->
		<Exec Command="npm run sass -- %(ScopedScssFiles.Identity) %(relativedir)%(filename).css" />
	</Target>

</Project>
